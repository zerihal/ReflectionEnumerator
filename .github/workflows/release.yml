name: Release CI/CD Pipeline

# Define permissions
permissions:
  contents: write  # Allows write access to the repository contents
  packages: write # Allows write access for pushing packages

on:
  push:
    branches:
      - Release

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up .NET
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0

      - name: Define and call function in a single step
        run: |
          #!/bin/bash
          set -e
      
          # Define the function
          test_func() {
            echo "Test OK"
          }

          # Call the function
          result=$(test_func)
          echo "Function output: $result"

      # 3. Increment version
      - name: Increment version
        run: |          
          # Get version from file
          if [ -f ReleaseVersion.txt ]; then
            build_number=$(cat ReleaseVersion.txt)
          else
            build_number=0
          fi
          echo "Current build number: $build_number"
          echo "build_number=$build_number" >> $GITHUB_ENV
        
          # Extract the current version from the .csproj file
          current_version=$(grep -oP '(?<=<Version>).*?(?=</Version>)' ./ReflectionEnumerator/ReflectionEnumerator.csproj)
          
          # Remove '-alpha.x' suffix if it exists
          base_version=$(echo "$current_version" | sed -E 's/-alpha\.[0-9]+//')
          
          # Check if the version is in x.x.x.x format
          if [[ "$base_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Split the version into its components
            IFS='.' read -r major minor patch build <<< "$base_version"
            # Increment the build number
            build=$((build + 1))
            # Construct the new version
            new_version="$major.$minor.$patch.$build"
          elif [[ "$base_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # Compare the base version with the build number
            compare_versions "$base_version" "$build_number"
            comparison_result=$?

            if (( comparison_result == 1 )); then
              echo "Base version ($base_version) is greater than build number ($build_number)."
              # Implement logic for when the base version is greater
            elif (( comparison_result == 2 )); then
              echo "Build number ($build_number) is greater than base version ($base_version)."
              # Implement logic for when the build number is greater
            else
              echo "Base version ($base_version) and build number ($build_number) are equal."
              # Implement logic for when the versions are equal
            fi
            
            # Version is in x.x.x format, append .0 to make it x.x.x.0
            new_version="$base_version.1"
          else
            echo "Error: Version format not recognized. Exiting."
            exit 1
          fi
          
          # Replace the version in the .csproj file
          sed -i "s|<Version>$current_version</Version>|<Version>$new_version</Version>|g" ./ReflectionEnumerator/ReflectionEnumerator.csproj

          # Output the new version
          echo "Updated version: $new_version"

      # 4. Build the project
      - name: Build
        run: dotnet build --configuration Release

      # 5. Run tests
      - name: Run tests
        run: dotnet test --configuration Release

      # 6. Add package source
      - name: Add GitHub Packages as NuGet source
        run: |
          dotnet nuget add source \
            --username "github-actions[bot]" \
            --password "${{ secrets.GITHUB_TOKEN }}" \
            --store-password-in-clear-text \
            --name "github" \
            "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      # 7. Publish nuget package
      - name: Publish NuGet package to GitHub Packages
        run: |
          dotnet pack ./ReflectionEnumerator/ReflectionEnumerator.csproj --configuration Release --output ./bin/Release
          dotnet nuget push ./bin/Release/*.nupkg --source "github" --api-key ${{ secrets.GITHUB_TOKEN }}

      # 8. Commit and push changes to the repo
      - name: Commit and push changes to repository
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Automated build, version increment, and package push"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
